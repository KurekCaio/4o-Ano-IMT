 // Incluir o arquivo de cabeçalho específico do compilador para o PIC16F628A
 // Defina a frequência do oscilador
// PIC16F628A Configuration Bit Settings
// 'C' source line config statements
// CONFIG
#pragma config FOSC = INTOSCIO  // Oscillator Selection bits (INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = ON       // RA5/MCLR/VPP Pin Function Select bit (RA5/MCLR/VPP pin function is MCLR)
#pragma config BOREN = ON       // Brown-out Detect Enable bit (BOD enabled)
#pragma config LVP = OFF        // Low-Voltage Programming Enable bit (RB4/PGM pin has digital I/O function, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EE Memory Code Protection bit (Data memory code protection off)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

#include <xc.h>

#define _XTAL_FREQ 4000000
// pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

// Mapeamento dos pinos
#define VCC PORTBbits.RB4
#define sensor PORTAbits.RA4
#define LED PORTBbits.RB5

// Variável para armazenar o valor lido do sensor
unsigned char flag; // char?? unsigned?? somente int funciona??
unsigned int valor;

// Função para leitura do sensor
// Executa pelo número de amostras passado e retorna o valor lido
unsigned int sensorCapacitivo(unsigned char amostras)
{
    unsigned long sum = 0;
    unsigned long tempo = 0;

    // Executa função 'amostras' vezes
    for (unsigned char i = 0; i < amostras; i++)
    {
        VCC = 0;

        // Coloca o pino sensor como saída para garantir nível baixo
        TRISAbits.TRISA4 = 0; // Define RB7 (sensor) como saída
        sensor = 0;
        __delay_us(100); // Delay para estabilidade

        // Altera o modo do pino do sensor para entrada
        TRISAbits.TRISA4 = 1; // Define RB7 (sensor) como entrada

        // Inicia carga do sensor
        VCC = 1;

        // Aguarda pino atingir nível alto (aproximadamente 2.5V)
        while (sensor == 0)
        {
            tempo++; // Acumula tempo para atingir nível alto
        }
        // Acumula valor para média
        sum += tempo;
    }

    // Realiza média e retorna valor lido
    return (unsigned int)(sum / amostras);
}

void loop()
{
    // Lê o valor do sensor
    valor = sensorCapacitivo(30);

    // Se o valor for maior que um dado threshold acende o led
    if (valor > 150)
    {
        flag = !flag;
        while(valor>150){valor = sensorCapacitivo(30);}
    }
    LED = flag;
    __delay_us(200);
}

void main()
{
    TRISBbits.TRISB4 = 0; // Define RB4 (VCC) como saída
    TRISAbits.TRISA4 = 1; // Define RB7 (sensor) como entrada
    TRISBbits.TRISB5 = 0; // Define RB5 (LED) como saída
    while (1)
    {
        loop();
    }
}
