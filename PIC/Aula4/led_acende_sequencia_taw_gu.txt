// PIC16F628A Configuration Bit Settings
// 'C' source line config statements
// CONFIG
#pragma config FOSC = INTOSCIO  // Oscillator Selection bits (INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = ON       // RA5/MCLR/VPP Pin Function Select bit (RA5/MCLR/VPP pin function is MCLR)
#pragma config BOREN = ON       // Brown-out Detect Enable bit (BOD enabled)
#pragma config LVP = OFF        // Low-Voltage Programming Enable bit (RB4/PGM pin has digital I/O function, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EE Memory Code Protection bit (Data memory code protection off)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>

#define _XTAL_FREQ 4000000

#define amarelo PORTBbits.RB0
#define verde PORTBbits.RB1
#define vermelho PORTBbits.RB2

#define bot_1 PORTAbits.RA0
#define bot_2 PORTAbits.RA1

void delay(int i){
    for(int y=0; i=!y; y++){
        __delay_ms(1);
    }
}

void leds(int a){
    PORTB = 0x00;
    if(a==1){
        amarelo = 1;
    }else if(a==2){
        verde = 1;
    }else{
        vermelho = 1;
    }
    
}


void main(void) {
    PORTB = 0x00;
    TRISB = 0x00;
    TRISA = 0b00000011;
    int x=1;
    
    
    while(1){
        
    leds(x);
    
    if(bot_1==0){
        x++;
        while(bot_1==0){
            delay(50);
        }
        delay(300);
    }
    
    if(bot_2==0){
        x--;
        while(bot_2==0){
            delay(50);
        }
        delay(300);
    }
    
    
    if(x==0){
        x=3;
    }else if(x==4){
        x=1;
    }
    
    }
    return;
}
